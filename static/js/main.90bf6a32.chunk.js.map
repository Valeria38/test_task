{"version":3,"sources":["components/LocationColumn.js","helpers/api.js","helpers/sort.js","helpers/transformData.js","containers/Main.js","helpers/loadScript.js","App.js","index.js"],"names":["uniqid","require","LocationColumn","state","active","addClass","index","element","_this$props","_this","props","showDetails","data","newItems","Array","length","fill","oldIndex","setState","_this2","this","_this$props2","title","react_default","a","createElement","className","map","onClick","key","Component","makeRequest","url","fetch","then","response","json","API_KEY","BASE_URL","sort","items","Object","keys","b","transformData","country","city","street","houseNumber","newStreet","newCity","parseInt","replace","split","join","match","Main","countries","cities","companies","collection","address","coords","lat","lng","makeRequestAndUpdate","results","geometry","location","initMap","catch","error","console","warn","setdefaultView","sortedCountries","_this$state","reduce","total","current","firstCity","find","obj","_transformData","concat","addCitiesToCountries","objectSpread","defineProperty","Country","toConsumableArray","City","log","sortCountries","showCountry","sortedCities","prevState","showCity","filter","companyNames","forEach","company","push","CompanyName","sortedCompanies","showCompany","getCoords","_ref","includes","_transformData2","renderMap","window","document","getElementsByTagName","script","src","async","defer","parentNode","insertBefore","loadScript","_this$state$coords","google","maps","Map","getElementById","center","zoom","Marker","position","changePosition","_ref2","Customers","components_LocationColumn","id","App","containers_Main","ReactDOM","render","src_App_0"],"mappings":"mRACMA,SAASC,EAAQ,KAuDRC,6MApDbC,MAAQ,CACNC,OAAQ,MAGVC,SAAW,SAACC,EAAOC,GAAY,IAAAC,EACCC,EAAKC,MAA3BC,EADqBH,EACrBG,YAAaC,EADQJ,EACRI,KACfC,EAAWC,MAAMF,EAAKG,QAAQC,MAAK,GACnCC,EAAWJ,EAASP,GAC1BO,EAASP,IAAUW,EACnBR,EAAKS,SAAS,CACZd,OAAQS,GAEV,WACEF,EAAYJ,8EAIP,IAAAY,EAAAC,KAAAC,EACiBD,KAAKV,MAArBY,EADDD,EACCC,MAAOV,EADRS,EACQT,KACPR,EAAWgB,KAAKjB,MAAhBC,OAER,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBJ,GAC/BV,EAAKG,OACJQ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACXd,EAAKe,IAAI,SAACpB,EAASD,GAAV,OACRiB,EAAAC,EAAAC,cAAA,MACEC,UACEtB,EAAOE,GACL,wBACA,iBAEJsB,QAAS,WACPT,EAAKd,SAASC,EAAOC,IAEvBsB,IAAK7B,KAEJO,MAIM,cAAVe,EACHC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAf,cAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BA9CII,aCHtB,IAAMC,EAAc,SAACC,GAC1B,OAAOC,MAAMD,GACZE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UAEhBC,EAAU,0CACVC,EAAQ,6DCQNC,EAbF,SAACC,EAAOlB,GACnB,OAAOA,GACL,IAAK,SAAU,OAAOmB,OAAOC,KAAKF,GAAOD,KAAK,SAACf,EAAGmB,GAAJ,OAAUH,EAAMG,GAAKH,EAAMhB,KAEzE,IAAK,YAAa,OAAOiB,OAAOC,KAAKF,GAAOD,KAAK,SAACf,EAAGmB,GAAJ,OAAUH,EAAMG,GAAG5B,OAASyB,EAAMhB,GAAGT,SAEtF,IAAK,YAAa,OAAOyB,EAAMD,KAAK,SAACf,EAAGmB,GAAJ,OAAUH,EAAMhB,GAAKgB,EAAMG,KAE/D,QAASH,EAAMD,KAAK,SAACf,EAAGmB,GAAJ,OAAUH,EAAMhB,GAAKgB,EAAMG,OC8EpCC,EArFO,SAACC,EAASC,EAAMC,GACpC,IAAIC,EACAC,EACAC,EAEF,OAAOL,GACL,IAAK,MACL,IAAK,SACL,IAAK,UACHG,EAAcG,SAASJ,IAAW,GAClCE,EAAYF,EAAOK,QAAQ,kBAAmB,IAC7CA,QAAQ,oBAAqB,IAC7BA,QAAQ,MAAM,MACdA,QAAQ,YAAa,gBACrBA,QAAQ,MAAM,UACdA,QAAQ,6BAA6B,cACrCC,MAAM,KAAKC,KAAK,KACjBJ,EAAUJ,EAAKM,QAAQ,MAAO,KAC7BA,QAAQ,QAAS,eAClB,MAEF,IAAK,UACL,IAAK,SACL,IAAK,SACL,IAAK,QACL,IAAK,YACL,IAAK,QACL,IAAK,SACL,IAAK,UACL,IAAK,cACL,IAAK,WACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,SACL,IAAK,SACHJ,EAAcD,EAAOK,QAAQ,gEAAgC,IAC7DH,EAAYF,EAAOK,QAAQ,SAAS,KACnCA,QAAQ,KAAK,IACbA,QAAQ,YAAa,IACrBA,QAAQ,QAAQ,OAChBA,QAAQ,cAAe,mBACvBA,QAAQ,SAAU,qBAClBA,QAAQ,gBAAiB,IACzBA,QAAQ,UAAW,OACnBA,QAAQ,iBAAkB,sBAC1BC,MAAM,KAAKC,KAAK,KACjBJ,EAAUJ,EAAKM,QAAQ,MAAO,KAC7BA,QAAQ,aAAU,WAClBA,QAAQ,OAAK,MACd,MAEF,IAAK,SACL,IAAK,KACHJ,EAAcG,SAASJ,IAAW,GAClCE,EAAYF,EAAOK,QAAQ,SAAS,KACnCA,QAAQ,kBAAmB,IAC3BA,QAAQ,IAAI,KACZC,MAAM,KAAKC,KAAK,KACjBJ,EAAUJ,EAAKM,QAAQ,MAAO,KAC9B,MAEF,IAAK,YACHJ,EAAcG,SAASJ,IAAUA,EAAOQ,MAAM,OAAO,IAAM,GAC3DN,EAAYF,EAAOK,QAAQ,SAAS,KACnCA,QAAQ,aAAW,IACnBA,QAAQ,aAAc,IACtBA,QAAQ,gBAAiB,IACzBC,MAAM,KAAKC,KAAK,KACjBJ,EAAUJ,EAAKM,QAAQ,MAAO,KAC9B,MAEF,QACEJ,EAAcA,EAAcG,SAASJ,IAAWA,EAAOQ,MAAM,QAAQ,IAAM,GAC3EN,EAAYF,EAAOK,QAAQ,SAAS,KACnCC,MAAM,KAAKC,KAAK,KACjBJ,EAAUJ,EAAKM,QAAQ,MAAO,KAGlC,MAAO,CACLJ,cACAC,YACAC,YCqISM,6MA9MbrD,MAAQ,CACNsD,UAAW,GACXC,OAAQ,GACRC,UAAW,GACXC,WAAY,GACZhD,KAAM,KACNiD,QAAS,GACTC,OAAQ,CACNC,IAAK,EACLC,IAAK,MA4BTC,qBAAuB,SAACjC,EAAKpB,GAC3B,OAAOmB,EAAYC,GAClBE,KAAK,SAAAtB,GACJH,EAAKS,SAAS,CACZ4C,OAAQlD,EAAKsD,QAAQ,GAAGC,SAASC,UAChC,WACD3D,EAAK4D,cAGRC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,KAAKF,QAG/BG,eAAiB,SAACC,GAAoB,IAAAC,EACPnE,EAAKN,MAA1ByD,EAD4BgB,EAC5BhB,WAAYhD,EADgBgE,EAChBhE,KAEhBiC,EAAU8B,EAAgB,GAC1BjB,EAASE,EAAWf,GAASgC,OAAO,SAACC,EAAOC,GAE9C,OADAD,EAAMC,IAAYD,EAAMC,IAAY,GAAK,EAClCD,GACN,IACCE,EAAYzC,EAAKmB,EAAQ,UAAU,GACnCX,EAASnC,EAAKqE,KAAK,SAAAC,GAAG,OAAIA,EAAG,OAAaF,IAAjC,QATuBG,EAUQvC,EAAcC,EAASmC,EAAWjC,GAAtEC,EAV4BmC,EAU5BnC,YAAaC,EAVekC,EAUflC,UAAWC,EAVIiC,EAUJjC,QAE1BlB,EAAG,GAAAoD,OAAM9C,GAAN8C,OAAiBpC,EAAjB,KAAAoC,OAAgCnC,EAAhC,KAAAmC,OAA6ClC,EAA7C,KAAAkC,OAAwDvC,EAAxD,SAAAuC,OAAuE/C,GAEhF5B,EAAKwD,qBAAqBjC,MAI5BqD,qBAAuB,WACrB5E,EAAKN,MAAMS,KAAKe,IAAI,SAAAuD,GAAG,OAAIzE,EAAKS,SAAS,CACvC0C,WAAWnB,OAAA6C,EAAA,EAAA7C,CAAA,GACNhC,EAAKN,MAAMyD,WADNnB,OAAA8C,EAAA,EAAA9C,CAAA,GAEPyC,EAAIM,QAFG,GAAAJ,OAAA3C,OAAAgD,EAAA,EAAAhD,CAEWhC,EAAKN,MAAMyD,WAAWsB,EAAIM,UAFrC,CAE+CN,EAAIQ,UAE5D,WACDlB,QAAQmB,IAAI,8CAIhBC,cAAgB,WAAM,IACZhC,EAAenD,EAAKN,MAApByD,WACFe,EAAkBpC,EAAKqB,EAAY,aAEzCnD,EAAKS,SAAS,CACZuC,UAAWkB,GACV,WACDH,QAAQmB,IAAI,yBACZlF,EAAKiE,eAAeC,QAIxBkB,YAAc,SAAChD,GAAY,IAInBa,EAHiBjD,EAAKN,MAApByD,WAGkBf,GAASgC,OAAO,SAACC,EAAOC,GAEhD,OADAD,EAAMC,IAAYD,EAAMC,IAAY,GAAK,EAClCD,GACN,IAGGgB,EAAevD,EAAKmB,EAAQ,UAElCjD,EAAKS,SAAS,SAAA6E,GAAS,MAAK,CAC1BrC,OAAQoC,EACRjC,QAAQpB,OAAA6C,EAAA,EAAA7C,CAAA,GAAKsD,EAAUlC,QAAhB,CAAyBhB,kBAIpCmD,SAAW,SAAClD,GAAS,IAEba,EADWlD,EAAKN,MAAdS,KACeqF,OAAO,SAAAf,GAAG,OAAIA,EAAG,OAAapC,IAE/CoD,EAAe,GACrBvC,EAAUwC,QAAQ,SAAAC,GAAO,OAAIF,EAAaG,KAAKD,EAAQE,eAEvD,IAAMC,EAAkBhE,EAAK2D,EAAc,aAE3CzF,EAAKS,SAAS,SAAA6E,GAAS,MAAK,CAC1BpC,UAAW4C,EACX1C,QAAQpB,OAAA6C,EAAA,EAAA7C,CAAA,GAAKsD,EAAUlC,QAAhB,CAAyBf,eAIpC0D,YAAc,SAACJ,GACb5B,QAAQmB,IAAIS,GADa,IAGnBrD,EADWtC,EAAKN,MAAdS,KACYqF,OAAO,SAAAf,GAAG,OAAIA,EAAG,cAAoBkB,IAAS,GAAnD,QAEf3F,EAAKS,SAAS,SAAA6E,GAAS,MAAK,CAC1BlC,QAAQpB,OAAA6C,EAAA,EAAA7C,CAAA,GAAKsD,EAAUlC,QAAhB,CAAyBd,aAC9B,WACFtC,EAAKgG,UAAUhG,EAAKN,MAAM0D,cAI9B4C,UAAY,SAAAC,GAA+B,IAA5B7D,EAA4B6D,EAA5B7D,QAASC,EAAmB4D,EAAnB5D,KAAMC,EAAa2D,EAAb3D,OAC5ByB,QAAQmB,IAAI9C,EAAQC,EAAKC,GAErBA,EAAO4D,SAAS,OAClB5D,EAASA,EAAOK,QAAQ,KAAM,KAJS,IAAAwD,EAOGhE,EAAcC,EAASC,EAAMC,GAAjEC,EAPiC4D,EAOjC5D,YAAaC,EAPoB2D,EAOpB3D,UAAWC,EAPS0D,EAOT1D,QAC1BlB,EAAG,GAAAoD,OAAM9C,GAAN8C,OAAiBpC,EAAjB,KAAAoC,OAAgCnC,EAAhC,KAAAmC,OAA6ClC,EAA7C,KAAAkC,OAAwDvC,EAAxD,SAAAuC,OAAuE/C,GAEhF5B,EAAKwD,qBAAqBjC,MAG5B6E,UAAY,YC9JC,SAAoB7E,GACjC,IAAI1B,EAAQwG,OAAOC,SAASC,qBAAqB,UAAU,GACvDC,EAASH,OAAOC,SAAStF,cAAc,UAC3CwF,EAAOC,IAAMlF,EACbiF,EAAOE,OAAQ,EACfF,EAAOG,OAAQ,EACf9G,EAAM+G,WAAWC,aAAaL,EAAQ3G,GDyJpCiH,CAAU,+CAAAnC,OACuC/C,EADvC,sBAGVyE,OAAOzC,QAAU5D,EAAK4D,WAGxBA,QAAU,WAAM,IAAAmD,EACO/G,EAAKN,MAAM2D,OAAxBC,EADMyD,EACNzD,IAAKC,EADCwD,EACDxD,IAEPrC,EAAM,IAAImF,OAAOW,OAAOC,KAAKC,IAAIZ,SAASa,eAAe,OAAQ,CACrEC,OAAQ,CAAE9D,MAAKC,OACf8D,KAAM,KAGO,IAAIhB,OAAOW,OAAOC,KAAKK,OAAO,CAC3CC,SAAU,CAAEjE,MAAKC,OACjBrC,WAIJsG,eAAiB,SAAAC,GAAkB,IAAfnE,EAAemE,EAAfnE,IAAKC,EAAUkE,EAAVlE,IACvBvD,EAAKS,SAAS,CACV4C,OAAQ,CAAEC,MAAKC,QACd,WACDvD,EAAK4D,gGAhKS,IAAAlD,EAAAC,KAClBA,KAAKyF,YAEL9E,EHpB4B,qCGqB3BG,KAAK,SAAAtB,GACJA,EAAKuH,UAAUxG,IAAI,SAAAuD,GAAG,OAAI/D,EAAKD,SAAS,CAEtC0C,WAAWnB,OAAA6C,EAAA,EAAA7C,CAAA,GACNtB,EAAKhB,MAAMyD,WADNnB,OAAA8C,EAAA,EAAA9C,CAAA,GAEPyC,EAAIM,QAAU,KAEjB5E,KAAMA,EAAKuH,WACV,WACD3D,QAAQmB,IAAI,kEAGdxE,EAAKkE,uBAELlE,EAAKyE,kBAGNtB,MAAM,SAAAC,GAAK,OAAIC,QAAQC,KAAKF,sCAgJ7B,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2G,EAAD,CACE9G,MAAM,YACNV,KAAMQ,KAAKjB,MAAMsD,UACjB9C,YAAaS,KAAKyE,cAEpBtE,EAAAC,EAAAC,cAAC2G,EAAD,CACE9G,MAAM,SACNV,KAAMQ,KAAKjB,MAAMuD,OACjB/C,YAAaS,KAAK4E,WAEpBzE,EAAAC,EAAAC,cAAC2G,EAAD,CACE9G,MAAM,UACNV,KAAMQ,KAAKjB,MAAMwD,UACjBhD,YAAaS,KAAKoF,cAEpBjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,OACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAK4G,GAAG,kBAxMDvG,aEGJwG,mLANX,OACE/G,EAAAC,EAAAC,cAAC8G,EAAD,aAHYzG,aCElB0G,IAASC,OAAOlH,EAAAC,EAAAC,cAACiH,EAAD,MAAS3B,SAASa,eAAe","file":"static/js/main.90bf6a32.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nconst uniqid = require('uniqid');\r\n\r\nclass LocationColumn extends Component {\r\n  state = {\r\n    active: [],\r\n  };\r\n\r\n  addClass = (index, element) => {\r\n    const { showDetails, data } = this.props;\r\n    const newItems = Array(data.length).fill(false);\r\n    const oldIndex = newItems[index];\r\n    newItems[index] = !oldIndex;\r\n    this.setState({\r\n      active: newItems,\r\n    },\r\n    () => {\r\n      showDetails(element);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { title, data } = this.props;\r\n    const { active } = this.state;\r\n\r\n    return (\r\n      <div className=\"location\">\r\n        <p className=\"location__title\">{title}</p>\r\n        {data.length ? (\r\n          <ul className=\"location__items\">\r\n            {data.map((element, index) => (\r\n              <li\r\n                className={\r\n                  active[index]\r\n                  ? 'location__item active'\r\n                  : 'location__item'\r\n                }\r\n                onClick={() => {\r\n                  this.addClass(index, element);\r\n                }}\r\n                key={uniqid()}\r\n              >\r\n                {element}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (title === 'Countries') ? (\r\n          <div className=\"location__loading\">Loading...</div>\r\n        ) : (\r\n          <div className=\"location__loading\"></div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationColumn;","export const makeRequest = (url) => {\r\n  return fetch(url)\r\n  .then(response => response.json())\r\n};\r\nexport const API_KEY = 'AIzaSyCjj3wuoUWKPBMR1HbUxyFn5lBnyjGOXKs';\r\nexport const BASE_URL = `https://maps.googleapis.com/maps/api/geocode/json?address=`;\r\nexport const DATA_FROM_SERVER = 'https://api.myjson.com/bins/kmvt0';","const sort = (items, title) => {\r\n  switch(title) {\r\n    case 'cities': return Object.keys(items).sort((a, b) => items[b] - items[a]);\r\n    break;\r\n    case 'countries': return Object.keys(items).sort((a, b) => items[b].length - items[a].length);\r\n    break;\r\n    case 'companies': return items.sort((a, b) => items[a] - items[b]);\r\n    break;\r\n    default: items.sort((a, b) => items[a] - items[b]);\r\n    break;\r\n  }\r\n};\r\n\r\nexport default sort;","//Regular expressions for different address formats\r\nconst transformData = (country, city, street) => {\r\n  let houseNumber;\r\n  let newStreet;\r\n  let newCity;\r\n\r\n    switch(country) {\r\n      case 'USA': \r\n      case 'Canada':\r\n      case 'Ireland':\r\n        houseNumber = parseInt(street) || \"\";\r\n        newStreet = street.replace(/^[ 0-9]+(-\\s)?/g, '')\r\n        .replace(/\\sSuite\\s\\d+(\\w)?/, '')\r\n        .replace(/Way/,\"St\")\r\n        .replace(/Jefferson/, \"SW Jefferson\")\r\n        .replace(/Dr./,\"Rd. NW\")\r\n        .replace(/City Center Plaza 516 Main/,\"516 E Main\")\r\n        .split(\" \").join('+');\r\n        newCity = city.replace(/\\s/g, \"+\")\r\n        .replace(/Elgin/, \"South Elgin\");\r\n        break;\r\n\r\n      case 'Germany': \r\n      case 'Brazil':\r\n      case 'Mexico':\r\n      case 'Spain':\r\n      case 'Argentina':\r\n      case 'Italy':\r\n      case 'Sweden':\r\n      case 'Austria':\r\n      case 'Switzerland':\r\n      case 'Portugal':\r\n      case 'Belgium':\r\n      case 'Denmark':\r\n      case 'Finland':\r\n      case 'Norway':\r\n      case 'Poland':\r\n        houseNumber = street.replace(/[A-Za-z\\.\\sßíóàêçñäúÅæ\\/\\,]+/, '');\r\n        newStreet = street.replace(/\\s\\s+/g,\" \")\r\n        .replace(/\\//,\"\")\r\n        .replace(/\\,?\\s\\d+$/, '')\r\n        .replace(/Platz/,'Str')\r\n        .replace(/Provinciale/, \"Provinciale Sud\")\r\n        .replace(/Bianco/, \"Bianco Moncalieri\")\r\n        .replace(/Grenzacherweg/, \"\")\r\n        .replace(/Estrada/, \"Tv.\")\r\n        .replace(/Rua do Mercado/, \"Alameda do Mercado\")\r\n        .split(\" \").join('+');\r\n        newCity = city.replace(/\\s/g, \"+\")\r\n        .replace(/Münster/,'Bocholt')\r\n        .replace(/Å/, \"Aa\");;\r\n        break;\r\n\r\n      case 'France':\r\n      case 'UK':\r\n        houseNumber = parseInt(street) || \"\";\r\n        newStreet = street.replace(/\\s\\s+/g,\" \")\r\n        .replace(/^[ 0-9,]+(\\s)?/g, '')\r\n        .replace(/-/,\"+\")\r\n        .split(\" \").join(\"+\");\r\n        newCity = city.replace(/\\s/g, \"+\");\r\n        break;\r\n\r\n      case 'Venezuela':\r\n        houseNumber = parseInt(street) ||street.match(/\\d+/)[0] || \"\";\r\n        newStreet = street.replace(/\\s\\s+/g,\" \")\r\n        .replace(/\\d+ª?\\s/, \"\")\r\n        .replace(/\\s#\\d+-\\d+/, \"\")\r\n        .replace(/Carrera con\\s/, \"\")\r\n        .split(\" \").join('+');\r\n        newCity = city.replace(/\\s/g, \"+\");\r\n        break;\r\n\r\n      default: \r\n        houseNumber = houseNumber = parseInt(street) || street.match(/\\d+$/)[0] || \"\";\r\n        newStreet = street.replace(/\\s\\s+/g,\" \")\r\n        .split(\" \").join('+');\r\n        newCity = city.replace(/\\s/g, \"+\");\r\n        break;\r\n    }\r\n    return {\r\n      houseNumber,\r\n      newStreet,\r\n      newCity\r\n    }\r\n};\r\nexport default transformData;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport LocationColumn from '../components/LocationColumn';\r\nimport loadScript from '../helpers/loadScript';\r\nimport { makeRequest, API_KEY, BASE_URL, DATA_FROM_SERVER } from '../helpers/api';\r\nimport sort from '../helpers/sort';\r\nimport transformData from '../helpers/transformData';\r\n\r\nclass Main extends Component {\r\n\r\n  state = {\r\n    countries: [],\r\n    cities: [],\r\n    companies: [],\r\n    collection: {},\r\n    data: null,\r\n    address: {},\r\n    coords: {\r\n      lat: 0,\r\n      lng: 0\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.renderMap();\r\n\r\n    makeRequest(DATA_FROM_SERVER)\r\n    .then(data => {\r\n      data.Customers.map(obj => this.setState({ \r\n      //define all countries with the value of empty array\r\n        collection: {\r\n          ...this.state.collection,\r\n          [obj.Country]: []\r\n        },\r\n        data: data.Customers\r\n      }, () => {\r\n        console.log('Countries were successfully added to this.state.collection');\r\n      }));\r\n    \r\n      this.addCitiesToCountries();\r\n\r\n      this.sortCountries();\r\n      \r\n    })\r\n    .catch(error => console.warn(error));\r\n  }\r\n\r\n  makeRequestAndUpdate = (url, data) => {\r\n    return makeRequest(url)\r\n    .then(data => {\r\n      this.setState({\r\n        coords: data.results[0].geometry.location\r\n      }, () => {\r\n        this.initMap();\r\n      });\r\n    })\r\n    .catch(error => console.warn(error));\r\n  }\r\n\r\n  setdefaultView = (sortedCountries) => {\r\n    const { collection, data } = this.state;\r\n\r\n    let country = sortedCountries[0];\r\n    let cities = collection[country].reduce((total, current) => {\r\n      total[current] = (total[current] || 0) + 1;\r\n      return total;\r\n    }, {});\r\n    let firstCity = sort(cities, 'cities')[0];\r\n    let street = data.find(obj => obj['City'] === firstCity)['Address'];\r\n    const { houseNumber, newStreet, newCity } = transformData(country, firstCity, street);\r\n      \r\n    const url = `${BASE_URL}${houseNumber}+${newStreet}+${newCity}+${country}&key=${API_KEY}`;\r\n       \r\n    this.makeRequestAndUpdate(url);\r\n  }\r\n\r\n  //add cities to country arrays\r\n  addCitiesToCountries = () => {\r\n    this.state.data.map(obj => this.setState({\r\n      collection: {\r\n        ...this.state.collection,\r\n        [obj.Country]: [...this.state.collection[obj.Country], obj.City]\r\n      }\r\n    }, () => {\r\n      console.log('Cities were added to country arrays');\r\n    }));\r\n  }\r\n\r\n  sortCountries = () => {\r\n    const { collection } = this.state;\r\n    const sortedCountries = sort(collection, 'countries');\r\n\r\n    this.setState({\r\n      countries: sortedCountries,\r\n    }, () => {\r\n      console.log('Countries were sorted');\r\n      this.setdefaultView(sortedCountries);\r\n    });\r\n  }\r\n\r\n  showCountry = (country) => {\r\n    const { collection } = this.state;\r\n\r\n    //get an object: key(city) -> value(count of companies)\r\n    const cities = collection[country].reduce((total, current) => {\r\n      total[current] = (total[current] || 0) + 1;\r\n      return total;\r\n    }, {});\r\n\r\n    //find a city with the greatest number of companies\r\n    const sortedCities = sort(cities, 'cities');\r\n\r\n    this.setState(prevState => ({\r\n      cities: sortedCities,\r\n      address: {...prevState.address, country}\r\n    }));\r\n  }\r\n\r\n  showCity = (city) => {\r\n    const { data } = this.state;\r\n    const companies = data.filter(obj => obj['City'] === city);\r\n\r\n    const companyNames = [];\r\n    companies.forEach(company => companyNames.push(company.CompanyName));\r\n\r\n    const sortedCompanies = sort(companyNames, 'companies');\r\n\r\n    this.setState(prevState => ({\r\n      companies: sortedCompanies,\r\n      address: {...prevState.address, city}\r\n    }));\r\n  }\r\n\r\n  showCompany = (company) => {\r\n    console.log(company)\r\n    const { data } = this.state;\r\n    const street = data.filter(obj => obj['CompanyName'] === company)[0]['Address'];\r\n\r\n    this.setState(prevState => ({\r\n      address: {...prevState.address, street }\r\n    }), () => {\r\n      this.getCoords(this.state.address);\r\n    });\r\n  }\r\n\r\n  getCoords = ({ country, city, street }) => {\r\n    console.log(country,city,street);\r\n\r\n    if (street.includes('\\'')) {\r\n      street = street.replace(/\\'/, '');\r\n    }\r\n\r\n    const { houseNumber, newStreet, newCity } = transformData(country, city, street);\r\n    const url = `${BASE_URL}${houseNumber}+${newStreet}+${newCity}+${country}&key=${API_KEY}`;\r\n        \r\n    this.makeRequestAndUpdate(url);\r\n  }\r\n\r\n  renderMap = () => {\r\n    loadScript(\r\n      `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=initMap`\r\n    );\r\n    window.initMap = this.initMap;\r\n  };\r\n\r\n  initMap = () => {\r\n    const { lat, lng } = this.state.coords;\r\n\r\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n      center: { lat, lng },\r\n      zoom: 15\r\n    });\r\n\r\n    const marker = new window.google.maps.Marker({\r\n      position: { lat, lng },\r\n      map\r\n    });\r\n  };\r\n\r\n  changePosition = ({ lat, lng }) => {\r\n    this.setState({\r\n        coords: { lat, lng }\r\n      }, () => {\r\n        this.initMap();\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <LocationColumn \r\n          title=\"Countries\" \r\n          data={this.state.countries}\r\n          showDetails={this.showCountry}   \r\n        />\r\n        <LocationColumn \r\n          title=\"Cities\" \r\n          data={this.state.cities}\r\n          showDetails={this.showCity} \r\n        />\r\n        <LocationColumn \r\n          title=\"Company\" \r\n          data={this.state.companies} \r\n          showDetails={this.showCompany} \r\n        />\r\n        <div className=\"map\">\r\n          <p className=\"map__title\">Map</p>\r\n          <div className=\"map__display\">\r\n            <div id=\"map\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","export default function loadScript(url) {\r\n  let index = window.document.getElementsByTagName(\"script\")[0];\r\n  let script = window.document.createElement(\"script\");\r\n  script.src = url;\r\n  script.async = true;\r\n  script.defer = true;\r\n  index.parentNode.insertBefore(script, index);\r\n};\r\n","import React, { Component } from 'react';\nimport Main from './containers/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <Main />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}