{"version":3,"sources":["components/CountryColumn.js","components/CityColumn.js","components/CompanyColumn.js","App.js","serviceWorker.js","index.js"],"names":["uniqid","require","handlers","CountryColumn","state","active","addClass","index","element","_this","newItems","Array","length","fill","setState","prevState","console","log","nextProps","_this2","this","data","_this3","react_default","a","createElement","className","props","title","map","onClick","showCountry","key","Component","CityColumn","showCity","CompanyColumn","showCompany","API_KEY","BASE_URL","App","countries","cities","companies","collection","address","coords","lat","lng","addCitiesToCountries","obj","Object","objectSpread","defineProperty","Country","concat","toConsumableArray","City","sortCountries","sortedCountries","keys","sort","b","country","reduce","total","current","sortedCities","city","filter","companyNames","forEach","company","push","CompanyName","sortedCompanies","street","getCoords","_ref","houseNumber","parseInt","newStreet","replace","split","join","newCity","url","fetch","then","res","json","results","geometry","location","initMap","catch","error","renderMap","window","document","getElementsByTagName","script","src","async","defer","parentNode","insertBefore","loadScript","google","maps","Map","getElementById","center","zoom","Marker","position","changePosition","_ref2","response","Customers","components_CountryColumn","components_CityColumn","components_CompanyColumn","id","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9fb2d71.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nconst uniqid = require('uniqid');\r\nconst handlers = require('react-handlers');\r\n\r\nclass CountryColumn extends Component {\r\n\r\n  state = {\r\n    active: []\r\n  }\r\n\r\n  componentWillReceiveProps (nextProps) {\r\n    const { data } = nextProps;\r\n\r\n    this.setState({\r\n      active: Array(data.length).fill(false)\r\n    }, () => console.log(this.state.active));\r\n  }\r\n  \r\n\r\n  addClass = (index, element) => {\r\n\r\n    const { active } = this.state;\r\n    const newItems = Array(active.length).fill(false);\r\n    newItems[index] = !newItems[index];\r\n\r\n    this.setState(prevState => ({\r\n      active: newItems\r\n    }), () => console.log(this.state.active));\r\n\r\n  }\r\n\r\n  render() {\r\n    const styles = {\r\n      background: 'lightgray'\r\n    }\r\n\r\n    return (\r\n      <div className=\"location\">\r\n        <p className=\"location__title\">{this.props.title}</p>\r\n          { this.props.data.length ? (\r\n            <ul className=\"location__items\">\r\n              {this.props.data.map((element, index) => \r\n                <li\r\n                  className={this.state.active[index] ? \"location__item active\" : \"location__item\"}\r\n                  onClick={handlers(() => this.props.showCountry(element), () => this.addClass(index))} \r\n                  key={uniqid()}>{element}\r\n                </li>\r\n              )}\r\n            </ul>\r\n          ) : (\r\n            <div className=\"location__loading\">Loading...</div>\r\n          ) }\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default CountryColumn;","import React, { Component } from 'react';\r\nconst uniqid = require('uniqid');\r\n\r\nclass CityColumn extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"location\">\r\n        <p className=\"location__title\">{this.props.title}</p>\r\n        <ul className=\"location__items\">\r\n          {this.props.data.map(\r\n            element => <li\r\n            onClick={() => this.props.showCity(element)} \r\n            key={uniqid()}>{element}</li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default CityColumn;","import React, { Component } from 'react';\r\nconst uniqid = require('uniqid');\r\n\r\nclass CompanyColumn extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"location\">\r\n        <p className=\"location__title\">{this.props.title}</p>\r\n        <ul className=\"location__items\">\r\n          {this.props.data.map(\r\n            element => <li\r\n            onClick={() => this.props.showCompany(element)}\r\n            key={uniqid()}>{element}</li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default CompanyColumn;","import React, { Component } from 'react';\nimport './App.css';\n// import GoogleApiWrapper from './components/MainMap';\nimport CountryColumn from './components/CountryColumn';\nimport CityColumn from './components/CityColumn';\nimport CompanyColumn from './components/CompanyColumn';\n\nconst API_KEY = 'AIzaSyCjj3wuoUWKPBMR1HbUxyFn5lBnyjGOXKs';\nconst BASE_URL = `https://maps.googleapis.com/maps/api/geocode/json?address=`;\n\nclass App extends Component {\n\n  state = {\n    countries: [],\n    cities: [],\n    companies: [],\n    collection: {},\n    data: null,\n    address: {},\n    coords: {\n      lat: 53.35534,\n      lng: 23.34618\n    }\n  };\n\n  componentDidMount() {\n    this.renderMap();\n\n    fetch('https://api.myjson.com/bins/kmvt0')\n    .then(response => response.json())\n    .then(data => {\n      data.Customers.map(obj => this.setState({ \n      //define all Countries with the value of empty array\n        collection: {\n          ...this.state.collection,\n          [obj.Country]: []\n        },\n        data: data.Customers\n      }, () => {\n        console.log('Countries were successfully added to this.state.collection');\n      }))\n    \n      this.addCitiesToCountries();\n\n      this.sortCountries();\n      \n    })\n    .catch(error => console.log(error));\n}\n\n//add cities to country arrays\naddCitiesToCountries = () => {\n  this.state.data.map(obj => this.setState({\n    collection: {\n      ...this.state.collection,\n      [obj.Country]: [...this.state.collection[obj.Country], obj.City]\n    }\n  }, () => {\n    console.log('Cities were added to country arrays');\n  }));\n}\n\nsortCountries = () => {\n  const { collection } = this.state;\n  const sortedCountries = Object.keys(collection).sort((a, b) => {\n    return collection[b].length - collection[a].length;\n  });\n\n  this.setState({\n    countries: sortedCountries\n  }, () => {\n    console.log('Countries were sorted')\n  });\n}\n\nshowCountry = (country) => {\n  \n  const { collection } = this.state;\n\n  //get an object: key(city) -> value(count of companies)\n  const cities = collection[country].reduce((total, current) => {\n    total[current] = (total[current] || 0) + 1;\n    return total;\n  }, {});\n\n  //find a city with the greatest number of companies\n  const sortedCities = Object.keys(cities).sort((a, b) => cities[b] - cities[a]);\n\n  this.setState(prevState => ({\n    cities: sortedCities,\n    address: {...prevState.address, country: country}\n  }));\n}\n\nshowCity = (city) => {\n  const { data } = this.state;\n\n  const companies = data.filter(obj => obj['City'] === city);\n  const companyNames = [];\n  companies.forEach(company => companyNames.push(company.CompanyName));\n  const sortedCompanies = companyNames.sort((a, b) => companyNames[a] - companyNames[b]);\n\n  this.setState(prevState => ({\n    companies: sortedCompanies,\n    address: {...prevState.address, city}\n  }));\n}\n\nshowCompany = (company) => {\n  console.log(company)\n  const { data } = this.state;\n\n  const street = data.filter(obj => obj['CompanyName'] === company)[0]['Address'];\n  console.log(street);\n\n  this.setState(prevState => ({\n    address: {...prevState.address, street: street }\n  }), () => {\n    console.log(this.state.address);\n    this.getCoords(this.state.address);// {country: 'UK', city: 'London', street: '120 Hanover St.'}\n  });\n\n}\n\ngetCoords = ({ country, city, street }) => {\n  const houseNumber = parseInt(street) || \"\";\n  const newStreet = street.replace(/^[ 0-9]+/g, '').split(\" \").join(\"+\"); \n  const newCity = city.replace(/\\s/g, \"\");\n\n  const url = `${BASE_URL}${houseNumber}+${newStreet}+${newCity}+${country}&key=${API_KEY}`;\n  console.log('URL: ');\n  console.log(url);\n      \n  fetch(url)\n  .then(res => res.json())\n  .then(data => {\n    console.log(data.results[0].geometry.location);\n\n    this.setState({\n      coords: data.results[0].geometry.location\n    }, () => {\n      this.initMap();\n    });\n  })\n  .catch(error => console.log(error));\n}\n\nrenderMap = () => {\n  loadScript(\n    `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=initMap`\n  );\n  window.initMap = this.initMap;\n};\n\ninitMap = () => {\n  const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n    center: { lat: this.state.coords.lat, lng: this.state.coords.lng },\n    zoom: 8\n  });\n\n  const marker = new window.google.maps.Marker({\n    position: { lat: this.state.coords.lat, lng: this.state.coords.lng },\n    map: map,\n    title: \"Hello World!\"\n  });\n};\n\nchangePosition = ({ lat, lng }) => {\n  this.setState({\n      coords: { lat, lng }\n    }, () => {\n      this.initMap();\n    });\n};\n\n  render() {\n    // console.log(this.state);\n    return (\n      <div className=\"App\">\n        <CountryColumn \n          title=\"Countries\" \n          data={this.state.countries}\n          showCountry={this.showCountry}   \n        />\n        <CityColumn \n          title=\"Cities\" \n          data={this.state.cities}\n          showCity={this.showCity} \n        />\n        <CompanyColumn \n          title=\"Company\" \n          data={this.state.companies} \n          showCompany={this.showCompany} \n        />\n        <div id=\"map\" />\n      </div>\n    );\n  }\n  \n}\n\nfunction loadScript(url) {\n  let index = window.document.getElementsByTagName(\"script\")[0];\n  let script = window.document.createElement(\"script\");\n  script.src = url;\n  script.async = true;\n  script.defer = true;\n  index.parentNode.insertBefore(script, index);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}