{"version":3,"sources":["components/LocationColumn.js","helpers/api.js","helpers/sort.js","App.js","helpers/loadScript.js","serviceWorker.js","index.js"],"names":["uniqid","require","LocationColumn","state","active","addClass","index","element","_this$props","_this","props","showDetails","data","newItems","Array","length","fill","oldIndex","setState","_this2","this","_this$props2","title","react_default","a","createElement","className","map","onClick","key","Component","makeRequest","url","fetch","then","response","json","API_KEY","BASE_URL","sort","items","Object","keys","b","App","countries","cities","companies","collection","address","coords","lat","lng","addCitiesToCountries","obj","objectSpread","defineProperty","Country","concat","toConsumableArray","City","console","log","sortCountries","sortedCountries","showCountry","country","reduce","total","current","sortedCities","prevState","showCity","city","filter","companyNames","forEach","company","push","CompanyName","sortedCompanies","showCompany","street","getCoords","_ref","houseNumber","newStreet","newCity","includes","replace","parseInt","split","join","match","results","geometry","location","initMap","catch","error","warn","renderMap","window","document","getElementsByTagName","script","src","async","defer","parentNode","insertBefore","loadScript","_this$state$coords","google","maps","Map","getElementById","center","zoom","Marker","position","changePosition","_ref2","Customers","components_LocationColumn","id","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37e69fdb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nconst uniqid = require('uniqid');\r\n\r\nclass LocationColumn extends Component {\r\n  state = {\r\n    active: [],\r\n  };\r\n\r\n  addClass = (index, element) => {\r\n    const { showDetails, data } = this.props;\r\n    const newItems = Array(data.length).fill(false);\r\n    const oldIndex = newItems[index];\r\n    newItems[index] = !oldIndex;\r\n    this.setState({\r\n      active: newItems,\r\n    },\r\n    () => {\r\n      showDetails(element);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { title, data } = this.props;\r\n    const { active } = this.state;\r\n\r\n    return (\r\n      <div className=\"location\">\r\n        <p className=\"location__title\">{title}</p>\r\n        {data.length ? (\r\n          <ul className=\"location__items\">\r\n            {data.map((element, index) => (\r\n              <li\r\n                className={\r\n                  active[index]\r\n                  ? 'location__item active'\r\n                  : 'location__item'\r\n                }\r\n                onClick={() => {\r\n                  this.addClass(index, element);\r\n                }}\r\n                key={uniqid()}\r\n              >\r\n                {element}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (title === 'Countries') ? (\r\n          <div className=\"location__loading\">Loading...</div>\r\n        ) : (\r\n          <div className=\"location__loading\"></div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationColumn;","export const makeRequest = (url) => {\r\n  return fetch(url)\r\n  .then(response => response.json())\r\n};\r\nexport const API_KEY = 'AIzaSyCjj3wuoUWKPBMR1HbUxyFn5lBnyjGOXKs';\r\nexport const BASE_URL = `https://maps.googleapis.com/maps/api/geocode/json?address=`;\r\nexport const DATA_FROM_SERVER = 'https://api.myjson.com/bins/kmvt0';","const sort = (items, title) => {\r\n  switch(title) {\r\n    case 'cities': return Object.keys(items).sort((a, b) => items[b] - items[a]);\r\n    break;\r\n    case 'countries': return Object.keys(items).sort((a, b) => items[b].length - items[a].length);\r\n    break;\r\n    case 'companies': return items.sort((a, b) => items[a] - items[b]);\r\n    break;\r\n    default: items.sort((a, b) => items[a] - items[b]);\r\n    break;\r\n  }\r\n};\r\n\r\nexport default sort;","import React, { Component } from 'react';\nimport './App.css';\nimport LocationColumn from './components/LocationColumn';\nimport loadScript from './helpers/loadScript';\nimport { makeRequest, API_KEY, BASE_URL, DATA_FROM_SERVER } from './helpers/api';\nimport sort from './helpers/sort';\n\nclass App extends Component {\n\n  state = {\n    countries: [],\n    cities: [],\n    companies: [],\n    collection: {},\n    data: null,\n    address: {},\n    coords: {\n      lat: 45.5154586,\n      lng: -122.6793461\n    }\n  };\n\n  componentDidMount() {\n    this.renderMap();\n\n    makeRequest(DATA_FROM_SERVER)\n    .then(data => {\n      data.Customers.map(obj => this.setState({ \n      //define all Countries with the value of empty array\n        collection: {\n          ...this.state.collection,\n          [obj.Country]: []\n        },\n        data: data.Customers\n      }, () => {\n        console.log('Countries were successfully added to this.state.collection');\n      }));\n    \n      this.addCitiesToCountries();\n\n      this.sortCountries();\n      \n    })\n    .catch(error => console.warn(error));\n}\n\n  //add cities to country arrays\n  addCitiesToCountries = () => {\n    this.state.data.map(obj => this.setState({\n      collection: {\n        ...this.state.collection,\n        [obj.Country]: [...this.state.collection[obj.Country], obj.City]\n      }\n    }, () => {\n      console.log('Cities were added to country arrays');\n    }));\n  }\n\n  sortCountries = () => {\n    const { collection } = this.state;\n\n    const sortedCountries = sort(collection, 'countries');\n\n    this.setState({\n      countries: sortedCountries,\n    }, () => {\n      console.log('Countries were sorted')\n    });\n  }\n\n  showCountry = (country) => {\n    const { collection } = this.state;\n\n    //get an object: key(city) -> value(count of companies)\n    const cities = collection[country].reduce((total, current) => {\n      total[current] = (total[current] || 0) + 1;\n      return total;\n    }, {});\n\n    //find a city with the greatest number of companies\n    const sortedCities = sort(cities, 'cities');\n\n    this.setState(prevState => ({\n      cities: sortedCities,\n      address: {...prevState.address, country}\n    }));\n  }\n\n  showCity = (city) => {\n    const { data } = this.state;\n    const companies = data.filter(obj => obj['City'] === city);\n\n    const companyNames = [];\n    companies.forEach(company => companyNames.push(company.CompanyName));\n\n    const sortedCompanies = sort(companyNames, 'companies');\n\n    this.setState(prevState => ({\n      companies: sortedCompanies,\n      address: {...prevState.address, city}\n    }));\n  }\n\n  showCompany = (company) => {\n    const { data } = this.state;\n    const street = data.filter(obj => obj['CompanyName'] === company)[0]['Address'];\n\n    this.setState(prevState => ({\n      address: {...prevState.address, street }\n    }), () => {\n      this.getCoords(this.state.address);\n    });\n\n  }\n\n  getCoords = ({ country, city, street }) => {\n\n    console.log(country,city,street);\n\n    if (street.includes('\\'')) {\n      street = street.replace(/\\'/, '');\n    }\n\n    let houseNumber;\n    let newStreet;\n    let newCity;\n\n    switch(country) {\n      case 'USA': \n      case 'Canada':\n      case 'Ireland':\n        houseNumber = parseInt(street) || \"\";\n        newStreet = street.replace(/^[ 0-9]+(-\\s)?/g, '')\n        .replace(/\\sSuite\\s\\d+(\\w)?/, '')\n        .replace(/Way/,\"St\")\n        .replace(/Jefferson/, \"SW Jefferson\")\n        .replace(/Dr./,\"Rd. NW\")\n        .replace(/City Center Plaza 516 Main/,\"516 E Main\")\n        .split(\" \").join('+');\n        newCity = city.replace(/\\s/g, \"+\")\n        .replace(/Elgin/, \"South Elgin\");\n        break;\n\n      case 'Germany': \n      case 'Brazil':\n      case 'Mexico':\n      case 'Spain':\n      case 'Argentina':\n      case 'Italy':\n      case 'Sweden':\n      case 'Austria':\n      case 'Switzerland':\n      case 'Portugal':\n      case 'Belgium':\n      case 'Denmark':\n      case 'Finland':\n      case 'Norway':\n      case 'Poland':\n        houseNumber = street.replace(/[A-Za-z\\.\\sßíóàêçñäúÅæ\\/\\,]+/, '');\n        newStreet = street.replace(/\\s\\s+/g,\" \")\n        .replace(/\\//,\"\")\n        .replace(/\\,?\\s\\d+$/, '')\n        .replace(/Platz/,'Str')\n        .replace(/Provinciale/, \"Provinciale Sud\")\n        .replace(/Bianco/, \"Bianco Moncalieri\")\n        .replace(/Grenzacherweg/, \"\")\n        .replace(/Estrada/, \"Tv.\")\n        .replace(/Rua do Mercado/, \"Alameda do Mercado\")\n        .split(\" \").join('+');\n        newCity = city.replace(/\\s/g, \"+\")\n        .replace(/Münster/,'Bocholt')\n        .replace(/Å/, \"Aa\");;\n        break;\n\n      case 'France':\n      case 'UK':\n        houseNumber = parseInt(street) || \"\";\n        newStreet = street.replace(/\\s\\s+/g,\" \")\n        .replace(/^[ 0-9,]+(\\s)?/g, '')\n        .replace(/-/,\"+\")\n        .split(\" \").join(\"+\");\n        newCity = city.replace(/\\s/g, \"+\");\n        break;\n\n      case 'Venezuela':\n        houseNumber = parseInt(street) ||street.match(/\\d+/)[0] || \"\";\n        newStreet = street.replace(/\\s\\s+/g,\" \")\n        .replace(/\\d+ª?\\s/, \"\")\n        .replace(/\\s#\\d+-\\d+/, \"\")\n        .replace(/Carrera con\\s/, \"\")\n        .split(\" \").join('+');\n        newCity = city.replace(/\\s/g, \"+\");\n        break;\n\n      default: \n        houseNumber = houseNumber = parseInt(street) || street.match(/\\d+$/)[0] || \"\";\n        newStreet = street.replace(/\\s\\s+/g,\" \")\n        .split(\" \").join('+');\n        newCity = city.replace(/\\s/g, \"+\");\n        break;\n    }\n\n    const url = `${BASE_URL}${houseNumber}+${newStreet}+${newCity}+${country}&key=${API_KEY}`;\n        \n    makeRequest(url)\n    .then(data => {\n      this.setState({\n        coords: data.results[0].geometry.location\n      }, () => {\n        this.initMap();\n      });\n    })\n    .catch(error => console.warn(error));\n  }\n\n  renderMap = () => {\n    loadScript(\n      `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=initMap`\n    );\n    window.initMap = this.initMap;\n  };\n\n  initMap = () => {\n    const { lat, lng } = this.state.coords;\n\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat, lng },\n      zoom: 15\n    });\n\n    const marker = new window.google.maps.Marker({\n      position: { lat, lng },\n      map\n    });\n  };\n\nchangePosition = ({ lat, lng }) => {\n  this.setState({\n      coords: { lat, lng }\n    }, () => {\n      this.initMap();\n    });\n};\n\n  render() {\n    return (\n      <div className=\"App\">\n        <LocationColumn \n          title=\"Countries\" \n          data={this.state.countries}\n          showDetails={this.showCountry}   \n        />\n        <LocationColumn \n          title=\"Cities\" \n          data={this.state.cities}\n          showDetails={this.showCity} \n        />\n        <LocationColumn \n          title=\"Company\" \n          data={this.state.companies} \n          showDetails={this.showCompany} \n        />\n        <div className=\"map\">\n          <p className=\"map__title\">Map</p>\n          <div className=\"map__display\">\n            <div id=\"map\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\n\nexport default App;\n","export default function loadScript(url) {\r\n  let index = window.document.getElementsByTagName(\"script\")[0];\r\n  let script = window.document.createElement(\"script\");\r\n  script.src = url;\r\n  script.async = true;\r\n  script.defer = true;\r\n  index.parentNode.insertBefore(script, index);\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}