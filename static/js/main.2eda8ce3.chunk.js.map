{"version":3,"sources":["components/LocationColumn.js","helpers/api.js","helpers/sort.js","helpers/transformData.js","containers/Main.js","helpers/loadScript.js","App.js","index.js"],"names":["uniqid","require","LocationColumn","state","active","addClass","index","element","_this$props","_this","props","showDetails","data","newItems","title","Array","length","fill","oldIndex","setState","removeClasses","_this$props2","_this2","this","_this$props3","react_default","a","createElement","className","map","onClick","key","Component","makeRequest","url","fetch","then","response","json","API_KEY","BASE_URL","sort","items","Object","keys","b","transformData","country","city","street","houseNumber","newStreet","newCity","parseInt","replace","split","join","match","Main","countries","cities","companies","collection","address","key1","Math","random","key2","coords","lat","lng","makeRequestAndUpdate","results","geometry","location","initMap","catch","error","console","warn","setdefaultView","sortedCountries","_this$state","reduce","total","current","firstCity","find","obj","_transformData","concat","addCitiesToCountries","objectSpread","defineProperty","Country","toConsumableArray","City","log","sortCountries","showCountry","sortedCities","prevState","getRandomKeys","showCity","filter","companyNames","forEach","company","push","CompanyName","sortedCompanies","getRandomKey","showCompany","getCoords","_ref","includes","_transformData2","renderMap","window","document","getElementsByTagName","script","src","async","defer","parentNode","insertBefore","loadScript","_this$state$coords","google","maps","Map","getElementById","center","zoom","Marker","position","component1","component2","_this$setState","component","changePosition","_ref2","Customers","_this$state2","_this$state$coords2","components_LocationColumn","class","id","App","containers_Main","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.2eda8ce3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nconst uniqid = require('uniqid');\r\n\r\nclass LocationColumn extends Component {\r\n  state = {\r\n    active: []\r\n  };\r\n\r\n  addClass = (index, element) => {\r\n    const { showDetails, data, title } = this.props;\r\n    const newItems = Array(data.length).fill(false);\r\n    const oldIndex = newItems[index];\r\n    newItems[index] = !oldIndex;\r\n    this.setState({\r\n      active: newItems,\r\n    },\r\n    () => {\r\n      showDetails(element);\r\n    });\r\n  };\r\n\r\n  removeClasses = (element) => {\r\n    const { title, showDetails } = this.props;\r\n    this.setState({\r\n       active: []\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { title, data } = this.props;\r\n    const { active } = this.state;\r\n\r\n    return (\r\n      <div className=\"location\">\r\n        <p className=\"location__title\">{title}</p>\r\n        {data.length ? (\r\n          <ul className=\"location__items\">\r\n            {data.map((element, index) => (\r\n              <li\r\n                className={\r\n                  active[index]\r\n                  ? 'location__item active'\r\n                  : 'location__item'\r\n                }\r\n                onClick={() => {\r\n                  this.addClass(index, element)\r\n                }}\r\n                key={uniqid()}\r\n              >\r\n                {element}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (title === 'Countries') ? (\r\n          <div className=\"location__loading\">Loading...</div>\r\n        ) : (\r\n          <div className=\"location__loading\"></div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationColumn;","export const makeRequest = (url) => {\r\n  return fetch(url)\r\n  .then(response => response.json())\r\n};\r\nexport const API_KEY = 'AIzaSyCjj3wuoUWKPBMR1HbUxyFn5lBnyjGOXKs';\r\nexport const BASE_URL = `https://maps.googleapis.com/maps/api/geocode/json?address=`;\r\nexport const DATA_FROM_SERVER = 'https://api.myjson.com/bins/kmvt0';","const sort = (items, title) => {\r\n  switch(title) {\r\n    case 'cities': return Object.keys(items).sort((a, b) => items[b] - items[a]);\r\n    break;\r\n    case 'countries': return Object.keys(items).sort((a, b) => items[b].length - items[a].length);\r\n    break;\r\n    case 'companies': return items.sort((a, b) => items[a] - items[b]);\r\n    break;\r\n    default: items.sort((a, b) => items[a] - items[b]);\r\n    break;\r\n  }\r\n};\r\n\r\nexport default sort;","//Regular expressions for different address formats\r\nconst transformData = (country, city, street) => {\r\n  let houseNumber;\r\n  let newStreet;\r\n  let newCity;\r\n\r\n    switch(country) {\r\n      case 'USA': \r\n      case 'Canada':\r\n      case 'Ireland':\r\n        houseNumber = parseInt(street) || \"\";\r\n        newStreet = street.replace(/^[ 0-9]+(-\\s)?/g, '')\r\n        .replace(/\\sSuite\\s\\d+(\\w)?/, '')\r\n        .replace(/Way/,\"St\")\r\n        .replace(/Jefferson/, \"SW Jefferson\")\r\n        .replace(/Dr./,\"Rd. NW\")\r\n        .replace(/City Center Plaza 516 Main/,\"516 E Main\")\r\n        .split(\" \").join('+');\r\n        newCity = city.replace(/\\s/g, \"+\")\r\n        .replace(/Elgin/, \"South Elgin\");\r\n        break;\r\n\r\n      case 'Germany': \r\n      case 'Brazil':\r\n      case 'Mexico':\r\n      case 'Spain':\r\n      case 'Argentina':\r\n      case 'Italy':\r\n      case 'Sweden':\r\n      case 'Austria':\r\n      case 'Switzerland':\r\n      case 'Portugal':\r\n      case 'Belgium':\r\n      case 'Denmark':\r\n      case 'Finland':\r\n      case 'Norway':\r\n      case 'Poland':\r\n        houseNumber = street.replace(/[A-Za-z\\.\\sßíóàêçñäúÅæ\\/\\,]+/, '');\r\n        newStreet = street.replace(/\\s\\s+/g,\" \")\r\n        .replace(/\\//,\"\")\r\n        .replace(/\\,?\\s\\d+$/, '')\r\n        .replace(/Platz/,'Str')\r\n        .replace(/Provinciale/, \"Provinciale Sud\")\r\n        .replace(/Bianco/, \"Bianco Moncalieri\")\r\n        .replace(/Grenzacherweg/, \"\")\r\n        .replace(/Estrada/, \"Tv.\")\r\n        .replace(/Rua do Mercado/, \"Alameda do Mercado\")\r\n        .split(\" \").join('+');\r\n        newCity = city.replace(/\\s/g, \"+\")\r\n        .replace(/Münster/,'Bocholt')\r\n        .replace(/Å/, \"Aa\");;\r\n        break;\r\n\r\n      case 'France':\r\n      case 'UK':\r\n        houseNumber = parseInt(street) || \"\";\r\n        newStreet = street.replace(/\\s\\s+/g,\" \")\r\n        .replace(/^[ 0-9,]+(\\s)?/g, '')\r\n        .replace(/-/,\"+\")\r\n        .split(\" \").join(\"+\");\r\n        newCity = city.replace(/\\s/g, \"+\");\r\n        break;\r\n\r\n      case 'Venezuela':\r\n        houseNumber = parseInt(street) ||street.match(/\\d+/)[0] || \"\";\r\n        newStreet = street.replace(/\\s\\s+/g,\" \")\r\n        .replace(/\\d+ª?\\s/, \"\")\r\n        .replace(/\\s#\\d+-\\d+/, \"\")\r\n        .replace(/Carrera con\\s/, \"\")\r\n        .split(\" \").join('+');\r\n        newCity = city.replace(/\\s/g, \"+\");\r\n        break;\r\n\r\n      default: \r\n        houseNumber = houseNumber = parseInt(street) || street.match(/\\d+$/)[0] || \"\";\r\n        newStreet = street.replace(/\\s\\s+/g,\" \")\r\n        .split(\" \").join('+');\r\n        newCity = city.replace(/\\s/g, \"+\");\r\n        break;\r\n    }\r\n    return {\r\n      houseNumber,\r\n      newStreet,\r\n      newCity\r\n    }\r\n};\r\nexport default transformData;","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport LocationColumn from '../components/LocationColumn';\r\nimport loadScript from '../helpers/loadScript';\r\nimport { makeRequest, API_KEY, BASE_URL, DATA_FROM_SERVER } from '../helpers/api';\r\nimport sort from '../helpers/sort';\r\nimport transformData from '../helpers/transformData';\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    countries: [],\r\n    cities: [],\r\n    companies: [],\r\n    collection: {},\r\n    data: null,\r\n    address: {},\r\n    key1: Math.random(),\r\n    key2: Math.random(),\r\n    coords: {\r\n      lat: null,\r\n      lng: null,\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.renderMap();\r\n\r\n    makeRequest(DATA_FROM_SERVER)\r\n      .then(data => {\r\n        data.Customers.map(obj =>\r\n          this.setState(\r\n            {\r\n              //define all countries with the value of empty array\r\n              collection: {\r\n                ...this.state.collection,\r\n                [obj.Country]: [],\r\n              },\r\n              data: data.Customers,\r\n            },\r\n            () => {\r\n              console.log(\r\n                'Countries were successfully added to this.state.collection'\r\n              );\r\n            }\r\n          )\r\n        );\r\n\r\n        this.addCitiesToCountries();\r\n\r\n        this.sortCountries();\r\n      })\r\n      .catch(error => console.warn(error));\r\n  }\r\n\r\n  makeRequestAndUpdate = (url, data) => {\r\n    return makeRequest(url)\r\n      .then(data => {\r\n        this.setState(\r\n          {\r\n            coords: data.results[0].geometry.location,\r\n          },\r\n          () => {\r\n            this.initMap();\r\n          }\r\n        );\r\n      })\r\n      .catch(error => console.warn(error));\r\n  };\r\n\r\n  setdefaultView = (sortedCountries) => {\r\n    const { collection, data } = this.state;\r\n\r\n    let country = sortedCountries[0];\r\n    let cities = collection[country].reduce((total, current) => {\r\n      total[current] = (total[current] || 0) + 1;\r\n      return total;\r\n    }, {});\r\n    let firstCity = sort(cities, 'cities')[0];\r\n    let street = data.find(obj => obj['City'] === firstCity)['Address'];\r\n    const { houseNumber, newStreet, newCity } = transformData(\r\n      country,\r\n      firstCity,\r\n      street\r\n    );\r\n\r\n    const url = `${BASE_URL}${houseNumber}+${newStreet}+${newCity}+${country}&key=${API_KEY}`;\r\n\r\n    this.makeRequestAndUpdate(url);\r\n  };\r\n\r\n  //add cities to country arrays\r\n  addCitiesToCountries = () => {\r\n    this.state.data.map(obj =>\r\n      this.setState(\r\n        {\r\n          collection: {\r\n            ...this.state.collection,\r\n            [obj.Country]: [...this.state.collection[obj.Country], obj.City],\r\n          },\r\n        },\r\n        () => {\r\n          console.log('Cities were added to country arrays');\r\n        }\r\n      )\r\n    );\r\n  };\r\n\r\n  sortCountries = () => {\r\n    const { collection } = this.state;\r\n    const sortedCountries = sort(collection, 'countries');\r\n\r\n    this.setState(\r\n      {\r\n        countries: sortedCountries,\r\n      },\r\n      () => {\r\n        console.log('Countries were sorted');\r\n        this.setdefaultView(sortedCountries);\r\n      }\r\n    );\r\n  };\r\n\r\n  showCountry = (country) => {\r\n    const { collection } = this.state;\r\n\r\n    //get an object: key(city) -> value(count of companies)\r\n    const cities = collection[country].reduce((total, current) => {\r\n      total[current] = (total[current] || 0) + 1;\r\n      return total;\r\n    }, {});\r\n\r\n    //find a city with the greatest number of companies\r\n    const sortedCities = sort(cities, 'cities');\r\n\r\n    this.setState(prevState => ({\r\n      cities: sortedCities,\r\n      address: { ...prevState.address, country },\r\n    }));\r\n    this.getRandomKeys('key1', 'key2');\r\n    this.showCity();\r\n  };\r\n\r\n  showCity = (city) => {\r\n    const { data } = this.state;\r\n    const companies = data.filter(obj => obj['City'] === city);\r\n\r\n    const companyNames = [];\r\n    companies.forEach(company => companyNames.push(company.CompanyName));\r\n\r\n    const sortedCompanies = sort(companyNames, 'companies');\r\n    console.log(sortedCompanies)\r\n\r\n    this.setState(prevState => ({\r\n      companies: sortedCompanies,\r\n      address: { ...prevState.address, city },\r\n    }));\r\n    this.getRandomKey('key2');\r\n  };\r\n\r\n  showCompany = (company) => {\r\n    const { data } = this.state;\r\n    const street = data.filter(obj => obj['CompanyName'] === company)[0]['Address'];\r\n\r\n    this.setState(\r\n      prevState => ({\r\n        address: { ...prevState.address, street },\r\n      }),\r\n      () => {\r\n        this.getCoords(this.state.address);\r\n      }\r\n    );\r\n  };\r\n\r\n  getCoords = ({ country, city, street }) => {\r\n    console.log(country, city, street);\r\n\r\n    if (street.includes(\"'\")) {\r\n      street = street.replace(/\\'/, '');\r\n    };\r\n\r\n    const { houseNumber, newStreet, newCity } = transformData(\r\n      country,\r\n      city,\r\n      street\r\n    );\r\n    const url = `${BASE_URL}${houseNumber}+${newStreet}+${newCity}+${country}&key=${API_KEY}`;\r\n\r\n    this.makeRequestAndUpdate(url);\r\n  };\r\n\r\n  renderMap = () => {\r\n    loadScript(\r\n      `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=initMap`\r\n    );\r\n    window.initMap = this.initMap;\r\n  };\r\n\r\n  initMap = () => {\r\n    const { lat, lng } = this.state.coords;\r\n\r\n    // if (lat ===null && lng === null) {\r\n    //   return;\r\n    // }\r\n\r\n    const map = new window.google.maps.Map(document.getElementById('map'), {\r\n      center: { lat, lng },\r\n      zoom: 15,\r\n    });\r\n\r\n    const marker = new window.google.maps.Marker({\r\n      position: { lat, lng },\r\n      map,\r\n    });\r\n  };\r\n  getRandomKeys = (component1, component2) => {\r\n    this.setState({\r\n      [component1]: Math.random(),\r\n      [component2]: Math.random(),\r\n    });\r\n  };\r\n  getRandomKey = (component) => {\r\n    this.setState({\r\n      [component]: Math.random(),\r\n    });\r\n  };\r\n  changePosition = ({ lat, lng }) => {\r\n    this.setState(\r\n      {\r\n        coords: { lat, lng },\r\n      },\r\n      () => {\r\n        this.initMap();\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { key1, key2 } = this.state;\r\n    const { lat, lng } = this.state.coords;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <LocationColumn\r\n          title=\"Countries\"\r\n          data={this.state.countries}\r\n          showDetails={this.showCountry}\r\n        />\r\n        <LocationColumn\r\n          title=\"Cities\"\r\n          data={this.state.cities}\r\n          showDetails={this.showCity}\r\n          key={key1}\r\n        />\r\n        <LocationColumn\r\n          title=\"Company\"\r\n          data={this.state.companies}\r\n          showDetails={this.showCompany}\r\n          key={key2}\r\n        />\r\n        <div className=\"map\">\r\n          <p className=\"map__title\">Map</p>\r\n          <div className=\"map__display\">\r\n            {\r\n              (lat === null && lng === null) ? \r\n              (//CSS animation loader\r\n                <div class=\"lds-ring\">\r\n                  <div></div>\r\n                  <div></div>\r\n                  <div></div>\r\n                  <div></div>\r\n                </div>) : \r\n              ( <div id=\"map\" />)\r\n            }\r\n           \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","export default function loadScript(url) {\r\n  let index = window.document.getElementsByTagName(\"script\")[0];\r\n  let script = window.document.createElement(\"script\");\r\n  script.src = url;\r\n  script.async = true;\r\n  script.defer = true;\r\n  index.parentNode.insertBefore(script, index);\r\n};\r\n","import React, { Component } from 'react';\nimport Main from './containers/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <Main />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}